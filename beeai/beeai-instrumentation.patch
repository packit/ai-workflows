diff --git a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/__init__.py b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/__init__.py
index 21da0aa2..c32ae843 100644
--- a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/__init__.py
+++ b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/__init__.py
@@ -40,6 +40,7 @@ except PackageNotFoundError:
 
 class BeeAIInstrumentor(BaseInstrumentor):  # type: ignore
     __slots__ = (
+        "_original_requirement_agent_run",
         "_original_react_agent_run",
         "_original_tool_calling_agent_run",
         "_original_chat_model_create",
@@ -61,6 +62,7 @@ class BeeAIInstrumentor(BaseInstrumentor):  # type: ignore
                 assert isinstance(config, TraceConfig)
 
             from beeai_framework.agents.base import BaseAgent
+            from beeai_framework.agents.experimental.agent import RequirementAgent
             from beeai_framework.agents.react.agent import ReActAgent
             from beeai_framework.agents.tool_calling.agent import ToolCallingAgent
             from beeai_framework.backend.chat import ChatModel
@@ -93,6 +95,10 @@ class BeeAIInstrumentor(BaseInstrumentor):  # type: ignore
                 return result
 
             ## Agent support
+            self._original_requirement_agent_run = getattr(
+                import_module("beeai_framework.agents.experimental.agent"), "run", None
+            )
+            setattr(RequirementAgent, "run", run_wrapper(RequirementAgent.run))
             self._original_react_agent_run = getattr(
                 import_module("beeai_framework.agents.react.agent"), "run", None
             )
@@ -121,6 +127,11 @@ class BeeAIInstrumentor(BaseInstrumentor):  # type: ignore
             logger.error("Instrumentation error", exc_info=e)
 
     def _uninstrument(self, **kwargs: Any) -> None:
+        if self._original_requirement_agent_run is not None:
+            from beeai_framework.agents.experimental.agent import RequirementAgent
+
+            setattr(RequirementAgent, "run", self._original_requirement_agent_run)
+            self._original_requirement_agent_run = None
         if self._original_react_agent_run is not None:
             from beeai_framework.agents.react.agent import ReActAgent
 
diff --git a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/middleware.py b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/middleware.py
index f8150f04..9062367b 100644
--- a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/middleware.py
+++ b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/middleware.py
@@ -19,6 +19,8 @@ from importlib.metadata import PackageNotFoundError, version
 from typing import Any, Callable, Dict, Optional, cast
 
 from beeai_framework.agents.base import BaseAgent
+from beeai_framework.agents.experimental.agent import RequirementAgent
+from beeai_framework.agents.experimental.events import RequirementAgentSuccessEvent
 from beeai_framework.agents.react.agent import ReActAgent
 from beeai_framework.agents.react.events import ReActAgentSuccessEvent
 from beeai_framework.agents.tool_calling.agent import ToolCallingAgent
@@ -63,6 +65,8 @@ def create_telemetry_middleware(
         if trace_id in active_traces_map:
             return
         active_traces_map[trace_id] = type(instance).__name__
+        if isinstance(instance, BaseAgent) and instance.meta.name:
+            active_traces_map[trace_id] += f"({instance.meta.name})"
         base_path = ".".join(emitter.namespace)
         prompt = None
         if isinstance(instance, BaseAgent):
@@ -283,6 +287,26 @@ def create_telemetry_middleware(
                         }
                         for m in react_agent_typed_data.memory.messages
                     ]
+                if isinstance(meta.creator, RequirementAgent):
+                    requirement_agent_typed_data = cast(RequirementAgentSuccessEvent, data)
+                    history = [
+                        {
+                            "text": m.text,
+                            "role": m.role.value if hasattr(m.role, "value") else m.role,
+                        }
+                        for m in requirement_agent_typed_data.state.memory.messages
+                    ]
+                    if (
+                        hasattr(requirement_agent_typed_data.state, "answer")
+                        and requirement_agent_typed_data.state.answer is not None
+                    ):
+                        result_role = requirement_agent_typed_data.state.answer.role
+                        generated_message = {
+                            "role": result_role.value
+                            if hasattr(result_role, "value")
+                            else result_role,
+                            "text": requirement_agent_typed_data.state.answer.text,
+                        }
             except Exception as e:
                 logger.error("Instrumentation error: failed to extract success message", exc_info=e)
 
diff --git a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/utils/build_trace_tree.py b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/utils/build_trace_tree.py
index 7f9e0f6a..eff19555 100644
--- a/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/utils/build_trace_tree.py
+++ b/python/instrumentation/openinference-instrumentation-beeai/src/openinference/instrumentation/beeai/utils/build_trace_tree.py
@@ -16,7 +16,7 @@ from typing import Any, List, Optional, TypedDict
 
 from opentelemetry import trace
 
-from openinference.instrumentation import OITracer
+from openinference.instrumentation import OITracer, using_metadata
 from openinference.semconv.trace import OpenInferenceSpanKindValues, SpanAttributes
 
 from .create_span import FrameworkSpan
@@ -153,7 +153,7 @@ def build_trace_tree(tracer: OITracer, main_span_kind: str, data: BuildTraceTree
         **computed_data,
     }
 
-    with tracer.start_as_current_span(
+    with using_metadata({"source": data["source"]}), tracer.start_as_current_span(
         name="beeai-framework-main",
         start_time=data["startTime"],
         attributes=attributes,
