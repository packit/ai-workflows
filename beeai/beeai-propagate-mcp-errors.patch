diff --git a/python/beeai_framework/tools/mcp/mcp.py b/python/beeai_framework/tools/mcp/mcp.py
index 629d9ffb..d6aa2f0b 100644
--- a/python/beeai_framework/tools/mcp/mcp.py
+++ b/python/beeai_framework/tools/mcp/mcp.py
@@ -6,7 +6,7 @@ from beeai_framework.tools.mcp.utils.session_provider import MCPClient, MCPSessi
 
 try:
     from mcp import ClientSession
-    from mcp.types import CallToolResult
+    from mcp.types import CallToolResult, TextContent
     from mcp.types import Tool as MCPToolInfo
 except ModuleNotFoundError as e:
     raise ModuleNotFoundError(
@@ -18,7 +18,7 @@ from pydantic import BaseModel
 from beeai_framework.context import RunContext
 from beeai_framework.emitter import Emitter
 from beeai_framework.logger import Logger
-from beeai_framework.tools.tool import Tool
+from beeai_framework.tools.tool import Tool, ToolError
 from beeai_framework.tools.types import JSONToolOutput, ToolRunOptions
 from beeai_framework.utils.models import JSONSchemaModel
 from beeai_framework.utils.strings import to_safe_word
@@ -62,6 +62,10 @@ class MCPTool(Tool[BaseModel, ToolRunOptions, JSONToolOutput]):
             name=self._tool.name, arguments=input_data.model_dump(exclude_none=True, exclude_unset=True)
         )
         logger.debug(f"Tool result: {result}")
+        if result.isError:
+            if result.content and isinstance(result.content[0], TextContent):
+                raise ToolError(result.content[0].text)
+            raise ToolError(JSONToolOutput(result.content))
         return JSONToolOutput(result.content)
 
     @classmethod
