version: 0.1.0
title: "Backport a fix and create a merge request"
description: "Backport a fix for issue {{ jira_issue }} for package {{ package }} for git branch {{ dist_git_branch }}"

instructions: |
  A couple of rules that you must follow and useful information for you:
    * All packages are in separate Git repositories under the Gitlab project {{ git_url }}
    * You can find the package at {{ git_url }}/{{ package }}
    * The Git user name is {{ git_user }}
    * The Git user's email address is {{ git_email }}
    * Use {{ gitlab_user }} as the GitLab user.
    * Work only in a temporary directory that you can create with the mktemp tool.
    * To create forks and open merge requests, always use GitLab's `glab` CLI tool.
    * You can find packaging guidelines at https://docs.fedoraproject.org/en-US/packaging-guidelines/
    * You can find the RPM packaging guide at https://rpm-packaging-guide.github.io/.


parameters:
- key: package
  input_type: string
  requirement: required
  description: Package to update
- key: upstream_fix
  input_type: string
  requirement: required
  description: A link to an upstream fix for the issue
- key: jira_issue
  input_type: string
  requirement: required
  description: Jira issue we are creating a backport fix for
- key: git_url
  input_type: string
  requirement: required
  description: URL of the Git repository
  default: https://gitlab.com/redhat/centos-stream/rpms
- key: dist_git_branch
  input_type: string
  requirement: required
  description: Git branch in dist-git to be updated
  default: c10s
- key: git_user
  input_type: string
  requirement: required
  description: Name of the Git user
  default: RHEL Packaging Agent
- key: git_email
  input_type: string
  requirement: required
  description: Email address of the Git users
  default: rhel-packaging-agent@redhat.com
- key: gitlab_user
  input_type: string
  requirement: required
  description: Name of the Gitlab user

prompt: |
  You are an agent for backporting a fix for a CentOS Stream package. You will prepare the content of the update
  and then create a commit with the changes. Create a temporary directory and always work inside it. Follow exactly these steps:

  1. Find the location of the {{ package }} package at {{ git_url }}. Always use the {{ dist_git_branch }} branch.

  2. Check if the package {{ package }} already has the fix {{ jira_issue }} applied.

  3. Create a local Git repository by following these steps:
    * Check if the fork already exists for {{ gitlab_user }} as {{ gitlab_user }}/{{ package }} and if not, create a fork of the {{ package }} package using the glab tool.
    * Clone the fork using git and HTTPS into the temp directory.
    * Run command `centpkg sources` in the cloned repository which downloads all sources defined in the RPM specfile.
    * Create a new Git branch named `automated-package-update-{{ jira_issue }}`.

  4. Update the {{ package }} with the fix:
    * Updating the 'Release' field in the .spec file as needed (or corresponding macros), following packaging documentation.
      * Make sure the format of the .spec file remains the same.
    * Fetch the upstream fix {{ upstream_fix }} locally and store it in the git repo as "{{ jira_issue }}.patch".
      * Add a new "Patch:" entry in the spec file for patch "{{ jira_issue }}.patch".
      * Verify that the patch is being applied in the "%prep" section.
    * Creating a changelog entry, referencing the Jira issue as "Resolves: <jira_issue>" for the issue {{ jira_issue }}. The changelog entry has to use the current date.
    * IMPORTANT: Only performing changes relevant to the backport update: Do not rename variables, comment out existing lines, or alter if-else branches in the .spec file.

  5. Verify and adjust the changes:
    * Use `rpmlint` to validate your .spec file changes and fix any new errors it identifies.
    * Generate the SRPM using `rpmbuild -bs` (ensure your .spec file and source files are correctly copied to the build environment as required by the command).
    * Verify the newly added patch applies cleanly using the command `centpkg prep`.

  6. Commit the changes:
    * The title of the Git commit should be in the format "[DO NOT MERGE: AI EXPERIMENTS] backport {{ jira_issue }}"
    * Include the reference to Jira as "Resolves: <jira_issue>" for the issue {{ jira_issue }}.
    * Commit the RPM spec file change and the newly added patch file.
    * Push the commit to the fork.

   7. Open a merge request:
     * Authenticate using `glab`
     * Open a merge request against the upstream repository of the {{ package }} in {{ git_url }} with previously created commit.
